---

- name: GRAFANA | Get datasources
  uri:
    url: "http://{{ ansible_nodename }}:{{ grafana_port }}/api/datasources"
    method: GET
    headers:
      Accept: application/json
      Content-Type: application/json
    force_basic_auth: yes
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
  register: datasource_check
  failed_when: false
  when: grafana_service_state in ['started', 'restarted', 'reloaded']

- name: GRAFANA | Delete datasources
  uri:
    url: "http://{{ ansible_nodename }}:{{ grafana_port }}/api/datasources/{{ item.id }}"
    method: DELETE
    headers:
      Accept: application/json
      Content-Type: application/json
    force_basic_auth: yes
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    status_code: 200
  with_items: "{{ datasource_check.json }}"
  when:
    - grafana_service_state in ['started', 'restarted', 'reloaded']
  register: delete_datasource
  retries: 10
  delay: 1
  until: ( delete_datasource.status == 200)

- name: GRAFANA | Add datasources
  uri:
    url: "http://{{ ansible_nodename }}:{{ grafana_port }}/api/datasources"
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
    force_basic_auth: yes
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    body: "{{ item }}"
    body_format: json
    status_code: 200
  with_items: "{{ lookup('template', grafana_datasource_template_path) }}"
  when:
    - grafana_service_state in ['started', 'restarted', 'reloaded']
  register: import_datasource
  retries: 10
  delay: 1
  until: ( import_datasource.status == 200)

- name: GRAFANA | Import stats dashboard
  uri:
    url: "http://{{ ansible_nodename }}:{{ grafana_port }}/api/dashboards/db"
    method: POST
    headers:
      Accept: application/json
      Content-Type: application/json
    force_basic_auth: yes
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    body: "{{ lookup('template', 'templates/dashboards/prometheus_stats.json.j2') }}"
    body_format: json
    status_code: 200
  when:
    - grafana_service_state == 'started'

- name: GRAFANA | Set Organisation
  uri:
    url: "http://{{ ansible_nodename }}:{{ grafana_port }}/api/orgs/1"
    method: PUT
    headers:
      Accept: application/json
      Content-Type: application/json
    force_basic_auth: yes
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    body: "{{ lookup('template', 'templates/organisation.json.j2') }}"
    body_format: json
    status_code: 200
  when:
    - grafana_organisation is defined
    - grafana_service_state == 'started'
